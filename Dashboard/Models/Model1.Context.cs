//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dashboard.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DashboardDBEntities : DbContext
    {
        public DashboardDBEntities()
            : base("name=DashboardDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<ar_customers> ar_customers { get; set; }
        public virtual DbSet<ar_salesmen> ar_salesmen { get; set; }
        public virtual DbSet<Balance> Balances { get; set; }
        public virtual DbSet<Expens> Expenses { get; set; }
    
        public virtual ObjectResult<dx_expenses_PROC_Result> dx_expenses_PROC(string dbName, string fROM, string tO)
        {
            var dbNameParameter = dbName != null ?
                new ObjectParameter("dbName", dbName) :
                new ObjectParameter("dbName", typeof(string));
    
            var fROMParameter = fROM != null ?
                new ObjectParameter("FROM", fROM) :
                new ObjectParameter("FROM", typeof(string));
    
            var tOParameter = tO != null ?
                new ObjectParameter("tO", tO) :
                new ObjectParameter("tO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dx_expenses_PROC_Result>("dx_expenses_PROC", dbNameParameter, fROMParameter, tOParameter);
        }
    
        public virtual ObjectResult<dx_sales_proc_Result> dx_sales_proc(string dbName, string from, string to, string customer, string saler)
        {
            var dbNameParameter = dbName != null ?
                new ObjectParameter("dbName", dbName) :
                new ObjectParameter("dbName", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(string));
    
            var customerParameter = customer != null ?
                new ObjectParameter("customer", customer) :
                new ObjectParameter("customer", typeof(string));
    
            var salerParameter = saler != null ?
                new ObjectParameter("saler", saler) :
                new ObjectParameter("saler", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dx_sales_proc_Result>("dx_sales_proc", dbNameParameter, fromParameter, toParameter, customerParameter, salerParameter);
        }
    
        public virtual ObjectResult<dx_monthly_expenses_Result> dx_monthly_expenses(string dbName, Nullable<int> month)
        {
            var dbNameParameter = dbName != null ?
                new ObjectParameter("dbName", dbName) :
                new ObjectParameter("dbName", typeof(string));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dx_monthly_expenses_Result>("dx_monthly_expenses", dbNameParameter, monthParameter);
        }
    }
}
